/**
 * SCRIPT CR√çTICO: Corre√ß√£o urgente para "code size exceeds maximum"
 * Execute IMEDIATAMENTE: node emergency-fix.js
 */

const web3 = require('./src/web3.config');
const ContractOptimization = require('./src/utils/contractOptimization');

async function emergencyFix() {
  console.log('üö® CORRE√á√ÉO CR√çTICA: "code size exceeds maximum"\n');

  console.log('üìã DIAGN√ìSTICO:\n');

  try {
    // 1. Verificar se Ganache est√° rodando
    console.log('1Ô∏è‚É£ Verificando conex√£o com Ganache...');
    const isConnected = await web3.eth.net.isListening();
    console.log(`   Status: ${isConnected ? '‚úÖ Conectado' : '‚ùå Desconectado'}`);

    if (!isConnected) {
      console.error('\n‚ùå GANACHE N√ÉO EST√Å RODANDO!');
      showGanacheInstructions();
      return;
    }

    // 2. Verificar configura√ß√µes atuais
    console.log('\n2Ô∏è‚É£ Verificando configura√ß√µes atuais...');
    const latestBlock = await web3.eth.getBlock('latest');
    console.log(`   Gas Limit atual: ${latestBlock.gasLimit.toLocaleString()}`);

    // 3. Testar se allowUnlimitedContractSize est√° ativo
    console.log('\n3Ô∏è‚É£ Testando suporte a contratos grandes...');

    // Tentar fazer um deployment de teste simples
    const accounts = await web3.eth.getAccounts();
    if (accounts.length === 0) {
      console.error('‚ùå Nenhuma conta dispon√≠vel!');
      return;
    }

    console.log(`   Conta de teste: ${accounts[0]}`);

    // 4. Verificar se √© problema de configura√ß√£o do Ganache
    console.log('\n4Ô∏è‚É£ Analisando problema...');
    console.log('   O erro "code size exceeds maximum" indica:');
    console.log('   - Contrato > 24KB (limite Ethereum)');
    console.log('   - Ganache N√ÉO configurado com --allowUnlimitedContractSize');

    console.log('\nüö® SOLU√á√ÉO CR√çTICA NECESS√ÅRIA:\n');
    showGanacheInstructions();

  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error.message);
    console.log('\nüö® SOLU√á√ÉO CR√çTICA NECESS√ÅRIA:\n');
    showGanacheInstructions();
  }
}

function showGanacheInstructions() {
  console.log('üî• A√á√ÉO IMEDIATA NECESS√ÅRIA:\n');

  console.log('üì± SE USANDO GANACHE GUI:');
  console.log('   1. ‚ùå FECHE o Ganache COMPLETAMENTE');
  console.log('   2. üÜï Abra o Ganache novamente');
  console.log('   3. ‚öôÔ∏è Clique em "New Workspace" ou "Settings"');
  console.log('   4. üìä Na aba "Server":');
  console.log('      - Port: 7545');
  console.log('      - Gas Limit: 15000000');
  console.log('      - Gas Price: 20');
  console.log('   5. üîß Na aba "Advanced":');
  console.log('      - ‚úÖ Allow unlimited contract size (OBRIGAT√ìRIO!)');
  console.log('      - Call gas limit: 15000000');
  console.log('   6. üíæ "Save and Start"');
  console.log('   7. ‚úÖ Teste sua aplica√ß√£o novamente\n');

  console.log('üíª SE USANDO GANACHE CLI:');
  console.log('   1. ‚ùå Pare o ganache-cli atual (Ctrl+C)');
  console.log('   2. üöÄ Execute este comando EXATO:');
  console.log('   ganache-cli --allowUnlimitedContractSize --gasLimit 15000000 --gasPrice 20000000000 --accounts 10 --defaultBalanceEther 1000 --port 7545');
  console.log('   3. ‚úÖ Teste sua aplica√ß√£o novamente\n');

  console.log('üê≥ SE USANDO DOCKER:');
  console.log('   docker run -p 7545:8545 trufflesuite/ganache-cli:latest --allowUnlimitedContractSize --gasLimit 15000000 --gasPrice 20000000000\n');

  console.log('‚ö†Ô∏è IMPORTANTE:');
  console.log('   - A flag --allowUnlimitedContractSize √© OBRIGAT√ìRIA');
  console.log('   - Sem esta flag, contratos > 24KB falhar√£o SEMPRE');
  console.log('   - REINICIE o Ganache ap√≥s configurar');
  console.log('   - Teste imediatamente ap√≥s reiniciar\n');

  console.log('üî¨ PARA VERIFICAR SE FUNCIONOU:');
  console.log('   node quick-test-ganache.js\n');

  console.log('üìû ESTE √â UM PROBLEMA CR√çTICO:');
  console.log('   - Configure o Ganache AGORA');
  console.log('   - N√£o √© poss√≠vel resolver via c√≥digo');
  console.log('   - √â uma limita√ß√£o de configura√ß√£o do ambiente');
}

async function quickValidation() {
  console.log('üîç VALIDA√á√ÉO R√ÅPIDA:\n');

  try {
    const isConnected = await web3.eth.net.isListening();
    if (!isConnected) {
      console.log('‚ùå Ganache n√£o conectado - configure primeiro');
      return false;
    }

    const latestBlock = await web3.eth.getBlock('latest');
    const gasLimit = parseInt(latestBlock.gasLimit);

    console.log(`Gas Limit: ${gasLimit.toLocaleString()}`);

    if (gasLimit >= 15000000) {
      console.log('‚úÖ Gas Limit adequado');
    } else {
      console.log('‚ùå Gas Limit insuficiente');
      return false;
    }

    // N√£o conseguimos testar allowUnlimitedContractSize diretamente
    // mas podemos verificar outras configura√ß√µes
    console.log('‚ö†Ô∏è ATEN√á√ÉO: Verifique manualmente se allowUnlimitedContractSize est√° ativo');

    return true;

  } catch (error) {
    console.log('‚ùå Valida√ß√£o falhou:', error.message);
    return false;
  }
}

// Executar corre√ß√£o se o arquivo for chamado diretamente
if (require.main === module) {
  console.log('üö®üö®üö® CORRE√á√ÉO CR√çTICA PARA CONTRATO MUITO GRANDE üö®üö®üö®\n');

  emergencyFix()
    .then(() => {
      console.log('\nüìù PR√ìXIMOS PASSOS:');
      console.log('1. Configure o Ganache conforme instru√ß√µes acima');
      console.log('2. Reinicie o Ganache COMPLETAMENTE');
      console.log('3. Execute: node quick-test-ganache.js');
      console.log('4. Teste sua aplica√ß√£o novamente');
      console.log('\n‚è∞ ESTE PROBLEMA DEVE SER RESOLVIDO AGORA!');
    })
    .catch(console.error);
}

module.exports = { emergencyFix, quickValidation };
